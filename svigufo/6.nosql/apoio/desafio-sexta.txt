https://docs.mongodb.com/manual/core/data-model-design/
https://docs.mongodb.com/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/

. Criar um novo banco de dados chamado sexta
use sexta

. Criar coleção de postits (postits)
db.createCollection('postits')

. Criar coleção de usuários (users)
db.createCollection('users')

-- dica
criar coleção mongodb
create collection mongodb

-- referência
https://docs.mongodb.com/manual/reference/method/db.createCollection/

-- solução
Colocar o banco de dados em uso.

==============================================

. Inserir 2 novos registros de postits
title : Titulo A
description : Descricao A

title : Titulo B
description : Descricao B

db.postits.insert({'title': 'Titulo A', 'description' : 'Descricao A'})
db.postits.insert({ 'title' : 'Titulo B', 'description':'Descricao B'  })

-- dica
inserir dados mongodb

-- referência
https://docs.mongodb.com/manual/reference/method/db.collection.insert/

==============================================

. Inserir 2 novos registros de usuários.
email : admin@email.com
password : 123456

email : comum@email.com
password : 123456

db.users.insertMany([{'email' : 'admin@email.com', 'password' : '123456'},
{ 'email' : 'comum@email.com', 'password':'123456' }])

==============================================

. Selecione o último documento inserido

-- dica
ordenação mongodb
db.users.find().sort({ _id : 1 }).limit(1).pretty()

==============================================

. Atualize o registro aonde o email seja 'admin@email.com' 
para que o nome dele seja igual a "Administrador"

-- dica
inserir campo mongodb

db.users.update({ "email" : "admin@email.com" }, 
{ $set : { "name" : "Administrador" }})

==============================================

. Atualize o registro aonde o email seja 'admin@email.com' 
para que possa receber uma lista de postits

db.users.update(
    { "email" : "admin@email.com" }
    , { $set : { "lista" : [ObjectId("5c01ae97142e06d0474bea35")] } }
)

-- dica
data type mongodb
inserir campo mongodb

. Selecione todos os registros para verificar as informações inseridas

==============================================

. Exclua somente o campo aonde inserimos o postits, para validarmos o próximo exercício

-- dica
excluir campo mongodb

db.users.update(
    { "email" : "admin@email.com" }
    , { $set : 
        { 
            "addresses" : []
        }
    }
)

. Selecione todos os registros para verificar as informações removidas

==============================================

. Atualize todos os registros para que elas 
recebam também a lista de postits

==============================================

. Atualize a lista de postits para que o usuário Admin tenha o 
postits com Título A, 
e para o comum, com o Título B

db.users.update(
    { "email" : "comum@email.com" }
    , { $set : { "postits" : [ObjectId()] } }
)

db.users.update(
    { "email" : "comum@email.com" }
    , { $set : { "addresses" : [
        { "local" : "Alameda Barão de Limeira", "state" : "SP" }
        , { "local" : "Av. Paulista", "state" : "RJ" }] } }
)

-- Lembrete
Buscar o id de um postit e incluir um item para o usuário

==============================================

. Traga todos os usuários e seus respectivos postits

-- referência
https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/

==============================================

. Remova o postit de Título B do usuário comum@email.com

==============================================

. Atualize o usuário Administrador para que ele tenha dois endereços

-- embedded documents

Adicionar 2 novos endereços

==============================================

. Traga somente os usuários cujo endereço tenha como estado, o estado de SP.